/* SPDX-License-Identifier: GPL-2.0-only */
/*
 * Copyright (c) 2021 MediaTek Inc.
 * Author: chun-jie.chen <chun-jie.chen@mediatek.com>
 */

#ifndef __SOC_MEDIATEK_MT8169_PM_DOMAINS_H
#define __SOC_MEDIATEK_MT8169_PM_DOMAINS_H

#include "mtk-pm-domains.h"
#include <dt-bindings/power/mt8169-power.h>

/*
 * MT8169 power domain support
 */

static const struct scpsys_domain_data scpsys_domain_data_mt8169[] = {
	[MT8169_POWER_DOMAIN_MFG0] = {
		.sta_mask = BIT(2),
		.ctl_offs = 0x308,
		.pwr_sta_offs = 0x16C,
		.pwr_sta2nd_offs = 0x170,
		.sram_pdn_bits = BIT(8),
		.sram_pdn_ack_bits = BIT(12),
		.caps = MTK_SCPD_DOMAIN_SUPPLY | MTK_SCPD_KEEP_DEFAULT_OFF,
	},
	[MT8169_POWER_DOMAIN_MFG1] = {
		.sta_mask = BIT(3),
		.ctl_offs = 0x30c,
		.pwr_sta_offs = 0x16C,
		.pwr_sta2nd_offs = 0x170,
		.sram_pdn_bits = BIT(8),
		.sram_pdn_ack_bits = BIT(12),
		.bp_cfg = {
			BUS_PROT_WR_IGN(INFRA_TYPE,
				MT8169_TOP_AXI_PROT_EN_1_MFG1_STEP1,
				MT8169_TOP_AXI_PROT_EN_1_SET,
				MT8169_TOP_AXI_PROT_EN_1_CLR,
				MT8169_TOP_AXI_PROT_EN_1_STA),
			BUS_PROT_WR_IGN(INFRA_TYPE,
				MT8169_TOP_AXI_PROT_EN_MFG1_STEP2,
				MT8169_TOP_AXI_PROT_EN_SET,
				MT8169_TOP_AXI_PROT_EN_CLR,
				MT8169_TOP_AXI_PROT_EN_STA),
			BUS_PROT_WR_IGN(INFRA_TYPE,
				MT8169_TOP_AXI_PROT_EN_MFG1_STEP3,
				MT8169_TOP_AXI_PROT_EN_SET,
				MT8169_TOP_AXI_PROT_EN_CLR,
				MT8169_TOP_AXI_PROT_EN_STA),
			BUS_PROT_WR_IGN(INFRA_TYPE,
				MT8169_TOP_AXI_PROT_EN_1_MFG1_STEP4,
				MT8169_TOP_AXI_PROT_EN_1_SET,
				MT8169_TOP_AXI_PROT_EN_1_CLR,
				MT8169_TOP_AXI_PROT_EN_1_STA),
		},
		.caps = MTK_SCPD_KEEP_DEFAULT_OFF,
	},
	[MT8169_POWER_DOMAIN_MFG2] = {
		.sta_mask = BIT(4),
		.ctl_offs = 0x310,
		.pwr_sta_offs = 0x16C,
		.pwr_sta2nd_offs = 0x170,
		.sram_pdn_bits = BIT(8),
		.sram_pdn_ack_bits = BIT(12),
		.caps = MTK_SCPD_KEEP_DEFAULT_OFF,
	},
	[MT8169_POWER_DOMAIN_MFG3] = {
		.sta_mask = BIT(5),
		.ctl_offs = 0x314,
		.pwr_sta_offs = 0x16C,
		.pwr_sta2nd_offs = 0x170,
		.sram_pdn_bits = BIT(8),
		.sram_pdn_ack_bits = BIT(12),
		.caps = MTK_SCPD_KEEP_DEFAULT_OFF,
	},
	[MT8169_POWER_DOMAIN_SSUSB] = {
		.sta_mask = BIT(20),
		.ctl_offs = 0x9F0,
		.pwr_sta_offs = 0x16C,
		.pwr_sta2nd_offs = 0x170,
		.sram_pdn_bits = BIT(8),
		.sram_pdn_ack_bits = BIT(12),
		.caps = MTK_SCPD_ACTIVE_WAKEUP,
	},
	[MT8169_POWER_DOMAIN_SSUSB_P1] = {
		.sta_mask = BIT(19),
		.ctl_offs = 0x9F4,
		.pwr_sta_offs = 0x16C,
		.pwr_sta2nd_offs = 0x170,
		.sram_pdn_bits = BIT(8),
		.sram_pdn_ack_bits = BIT(12),
		.caps = MTK_SCPD_ACTIVE_WAKEUP,
	},
	[MT8169_POWER_DOMAIN_DIS] = {
		.sta_mask = BIT(21),
		.ctl_offs = 0x354,
		.pwr_sta_offs = 0x16C,
		.pwr_sta2nd_offs = 0x170,
		.sram_pdn_bits = BIT(8),
		.sram_pdn_ack_bits = BIT(12),
		.bp_cfg = {
			BUS_PROT_WR_IGN(INFRA_TYPE,
				MT8169_TOP_AXI_PROT_EN_1_DIS_STEP1,
				MT8169_TOP_AXI_PROT_EN_1_SET,
				MT8169_TOP_AXI_PROT_EN_1_CLR,
				MT8169_TOP_AXI_PROT_EN_1_STA),
			BUS_PROT_WR_IGN(INFRA_TYPE,
				MT8169_TOP_AXI_PROT_EN_DIS_STEP2,
				MT8169_TOP_AXI_PROT_EN_SET,
				MT8169_TOP_AXI_PROT_EN_CLR,
				MT8169_TOP_AXI_PROT_EN_STA),
		},
	},
	[MT8169_POWER_DOMAIN_IMG] = {
		.sta_mask = BIT(13),
		.ctl_offs = 0x334,
		.pwr_sta_offs = 0x16C,
		.pwr_sta2nd_offs = 0x170,
		.sram_pdn_bits = BIT(8),
		.sram_pdn_ack_bits = BIT(12),
		.bp_cfg = {
			BUS_PROT_WR_IGN(INFRA_TYPE,
				MT8169_TOP_AXI_PROT_EN_1_IMG_STEP1,
				MT8169_TOP_AXI_PROT_EN_1_SET,
				MT8169_TOP_AXI_PROT_EN_1_CLR,
				MT8169_TOP_AXI_PROT_EN_1_STA),
			BUS_PROT_WR_IGN(INFRA_TYPE,
				MT8169_TOP_AXI_PROT_EN_1_IMG_STEP2,
				MT8169_TOP_AXI_PROT_EN_1_SET,
				MT8169_TOP_AXI_PROT_EN_1_CLR,
				MT8169_TOP_AXI_PROT_EN_1_STA),
		},
		.caps = MTK_SCPD_KEEP_DEFAULT_OFF,
	},
	[MT8169_POWER_DOMAIN_IMG2] = {
		.sta_mask = BIT(14),
		.ctl_offs = 0x338,
		.pwr_sta_offs = 0x16C,
		.pwr_sta2nd_offs = 0x170,
		.sram_pdn_bits = BIT(8),
		.sram_pdn_ack_bits = BIT(12),
		.bp_cfg = {
			BUS_PROT_WR(SMI_TYPE,
				MT8169_SMI_COMMON_SMI_CLAMP_IMG2,
				MT8169_SMI_COMMON_CLAMP_EN_SET,
				MT8169_SMI_COMMON_CLAMP_EN_CLR,
				MT8169_SMI_COMMON_CLAMP_EN_STA),
		},
		.caps = MTK_SCPD_KEEP_DEFAULT_OFF | MTK_SCPD_CLAMP_PROTECTION,
	},
	[MT8169_POWER_DOMAIN_IPE] = {
		.sta_mask = BIT(15),
		.ctl_offs = 0x33C,
		.pwr_sta_offs = 0x16C,
		.pwr_sta2nd_offs = 0x170,
		.sram_pdn_bits = BIT(8),
		.sram_pdn_ack_bits = BIT(12),
		.bp_cfg = {
			BUS_PROT_WR_IGN(INFRA_TYPE,
				MT8169_TOP_AXI_PROT_EN_1_IPE_STEP1,
				MT8169_TOP_AXI_PROT_EN_1_SET,
				MT8169_TOP_AXI_PROT_EN_1_CLR,
				MT8169_TOP_AXI_PROT_EN_1_STA),
			BUS_PROT_WR_IGN(INFRA_TYPE,
				MT8169_TOP_AXI_PROT_EN_1_IPE_STEP2,
				MT8169_TOP_AXI_PROT_EN_1_SET,
				MT8169_TOP_AXI_PROT_EN_1_CLR,
				MT8169_TOP_AXI_PROT_EN_1_STA),
		},
		.caps = MTK_SCPD_KEEP_DEFAULT_OFF,
	},
	[MT8169_POWER_DOMAIN_CAM] = {
		.sta_mask = BIT(23),
		.ctl_offs = 0x35C,
		.pwr_sta_offs = 0x16C,
		.pwr_sta2nd_offs = 0x170,
		.sram_pdn_bits = BIT(8),
		.sram_pdn_ack_bits = BIT(12),
		.bp_cfg = {
			BUS_PROT_WR_IGN(INFRA_TYPE,
				MT8169_TOP_AXI_PROT_EN_1_CAM_STEP1,
				MT8169_TOP_AXI_PROT_EN_1_SET,
				MT8169_TOP_AXI_PROT_EN_1_CLR,
				MT8169_TOP_AXI_PROT_EN_1_STA),
			BUS_PROT_WR_IGN(INFRA_TYPE,
				MT8169_TOP_AXI_PROT_EN_1_CAM_STEP2,
				MT8169_TOP_AXI_PROT_EN_1_SET,
				MT8169_TOP_AXI_PROT_EN_1_CLR,
				MT8169_TOP_AXI_PROT_EN_1_STA),
		},
		.caps = MTK_SCPD_KEEP_DEFAULT_OFF,
	},
	[MT8169_POWER_DOMAIN_CAM_RAWA] = {
		.sta_mask = BIT(24),
		.ctl_offs = 0x360,
		.pwr_sta_offs = 0x16C,
		.pwr_sta2nd_offs = 0x170,
		.sram_pdn_bits = BIT(8),
		.sram_pdn_ack_bits = BIT(12),
		.bp_cfg = {
			BUS_PROT_WR(SMI_TYPE,
				MT8169_SMI_COMMON_SMI_CLAMP_CAM_RAWA,
				MT8169_SMI_COMMON_CLAMP_EN_SET,
				MT8169_SMI_COMMON_CLAMP_EN_CLR,
				MT8169_SMI_COMMON_CLAMP_EN_STA),
		},
		.reset_smi = {
			SMI_RESET_WR(MT8169_SMI_LARB16_RESET,
				MT8169_SMI_LARB16_RESET_ADDR),
		},
		.caps = MTK_SCPD_KEEP_DEFAULT_OFF | MTK_SCPD_CLAMP_PROTECTION,
	},
	[MT8169_POWER_DOMAIN_CAM_RAWB] = {
		.sta_mask = BIT(25),
		.ctl_offs = 0x364,
		.pwr_sta_offs = 0x16C,
		.pwr_sta2nd_offs = 0x170,
		.sram_pdn_bits = BIT(8),
		.sram_pdn_ack_bits = BIT(12),
		.bp_cfg = {
			BUS_PROT_WR(SMI_TYPE,
				MT8169_SMI_COMMON_SMI_CLAMP_CAM_RAWB,
				MT8169_SMI_COMMON_CLAMP_EN_SET,
				MT8169_SMI_COMMON_CLAMP_EN_CLR,
				MT8169_SMI_COMMON_CLAMP_EN_STA),
		},
		.reset_smi = {
			SMI_RESET_WR(MT8169_SMI_LARB17_RESET,
				MT8169_SMI_LARB17_RESET_ADDR),
		},
		.caps = MTK_SCPD_KEEP_DEFAULT_OFF | MTK_SCPD_CLAMP_PROTECTION,
	},
	[MT8169_POWER_DOMAIN_VENC] = {
		.sta_mask = BIT(18),
		.ctl_offs = 0x348,
		.pwr_sta_offs = 0x16C,
		.pwr_sta2nd_offs = 0x170,
		.sram_pdn_bits = BIT(8),
		.sram_pdn_ack_bits = BIT(12),
		.bp_cfg = {
			BUS_PROT_WR_IGN(INFRA_TYPE,
				MT8169_TOP_AXI_PROT_EN_1_VENC_STEP1,
				MT8169_TOP_AXI_PROT_EN_1_SET,
				MT8169_TOP_AXI_PROT_EN_1_CLR,
				MT8169_TOP_AXI_PROT_EN_1_STA),
			BUS_PROT_WR_IGN(INFRA_TYPE,
				MT8169_TOP_AXI_PROT_EN_1_VENC_STEP2,
				MT8169_TOP_AXI_PROT_EN_1_SET,
				MT8169_TOP_AXI_PROT_EN_1_CLR,
				MT8169_TOP_AXI_PROT_EN_1_STA),
		},
		.caps = MTK_SCPD_KEEP_DEFAULT_OFF,
	},
	[MT8169_POWER_DOMAIN_VDEC] = {
		.sta_mask = BIT(16),
		.ctl_offs = 0x340,
		.pwr_sta_offs = 0x16C,
		.pwr_sta2nd_offs = 0x170,
		.sram_pdn_bits = BIT(8),
		.sram_pdn_ack_bits = BIT(12),
		.bp_cfg = {
			BUS_PROT_WR_IGN(INFRA_TYPE,
				MT8169_TOP_AXI_PROT_EN_1_VDEC_STEP1,
				MT8169_TOP_AXI_PROT_EN_1_SET,
				MT8169_TOP_AXI_PROT_EN_1_CLR,
				MT8169_TOP_AXI_PROT_EN_1_STA),
			BUS_PROT_WR_IGN(INFRA_TYPE,
				MT8169_TOP_AXI_PROT_EN_1_VDEC_STEP2,
				MT8169_TOP_AXI_PROT_EN_1_SET,
				MT8169_TOP_AXI_PROT_EN_1_CLR,
				MT8169_TOP_AXI_PROT_EN_1_STA),
		},
		.caps = MTK_SCPD_KEEP_DEFAULT_OFF,
	},
	[MT8169_POWER_DOMAIN_WPE] = {
		.sta_mask = BIT(0),
		.ctl_offs = 0x3F8,
		.pwr_sta_offs = 0x16C,
		.pwr_sta2nd_offs = 0x170,
		.sram_pdn_bits = BIT(8),
		.sram_pdn_ack_bits = BIT(12),
		.bp_cfg = {
			BUS_PROT_WR_IGN(INFRA_TYPE,
				MT8169_TOP_AXI_PROT_EN_2_WPE_STEP1,
				MT8169_TOP_AXI_PROT_EN_2_SET,
				MT8169_TOP_AXI_PROT_EN_2_CLR,
				MT8169_TOP_AXI_PROT_EN_2_STA),
			BUS_PROT_WR_IGN(INFRA_TYPE,
				MT8169_TOP_AXI_PROT_EN_2_WPE_STEP2,
				MT8169_TOP_AXI_PROT_EN_2_SET,
				MT8169_TOP_AXI_PROT_EN_2_CLR,
				MT8169_TOP_AXI_PROT_EN_2_STA),
		},
		.caps = MTK_SCPD_KEEP_DEFAULT_OFF,
	},
	[MT8169_POWER_DOMAIN_CONN_ON] = {
		.sta_mask = BIT(1),
		.ctl_offs = 0x304,
		.pwr_sta_offs = 0x16C,
		.pwr_sta2nd_offs = 0x170,
		.bp_cfg = {
			BUS_PROT_WR_IGN(INFRA_TYPE,
				MT8169_TOP_AXI_PROT_EN_1_CONN_ON_STEP1,
				MT8169_TOP_AXI_PROT_EN_1_SET,
				MT8169_TOP_AXI_PROT_EN_1_CLR,
				MT8169_TOP_AXI_PROT_EN_1_STA),
			BUS_PROT_WR_IGN(INFRA_TYPE,
				MT8169_TOP_AXI_PROT_EN_CONN_ON_STEP2,
				MT8169_TOP_AXI_PROT_EN_SET,
				MT8169_TOP_AXI_PROT_EN_CLR,
				MT8169_TOP_AXI_PROT_EN_STA),
			BUS_PROT_WR_IGN(INFRA_TYPE,
				MT8169_TOP_AXI_PROT_EN_CONN_ON_STEP3,
				MT8169_TOP_AXI_PROT_EN_SET,
				MT8169_TOP_AXI_PROT_EN_CLR,
				MT8169_TOP_AXI_PROT_EN_STA),
			BUS_PROT_WR_IGN(INFRA_TYPE,
				MT8169_TOP_AXI_PROT_EN_CONN_ON_STEP4,
				MT8169_TOP_AXI_PROT_EN_SET,
				MT8169_TOP_AXI_PROT_EN_CLR,
				MT8169_TOP_AXI_PROT_EN_STA),
		},
		.caps = MTK_SCPD_KEEP_DEFAULT_OFF | MTK_SCPD_ACTIVE_WAKEUP,
	},
	[MT8169_POWER_DOMAIN_CSIRX_TOP] = {
		.sta_mask = BIT(6),
		.ctl_offs = 0x318,
		.pwr_sta_offs = 0x16C,
		.pwr_sta2nd_offs = 0x170,
		.sram_pdn_bits = BIT(8),
		.sram_pdn_ack_bits = BIT(12),
		.caps = MTK_SCPD_KEEP_DEFAULT_OFF,
	},
	[MT8169_POWER_DOMAIN_NNA] = {
		.sta_mask = BIT(30),
		.ctl_offs = 0x3E0,
		.pwr_sta_offs = 0x16C,
		.pwr_sta2nd_offs = 0x170,
		.sram_pdn_bits = BIT(8),
		.sram_pdn_ack_bits = BIT(12),
		.bp_cfg = {
			BUS_PROT_WR_IGN(INFRA_TYPE,
				MT8169_TOP_AXI_PROT_EN_2_NNA_STEP1,
				MT8169_TOP_AXI_PROT_EN_2_SET,
				MT8169_TOP_AXI_PROT_EN_2_CLR,
				MT8169_TOP_AXI_PROT_EN_2_STA),
		},
	},
	[MT8169_POWER_DOMAIN_NNA0] = {
		.sta_mask = BIT(27),
		.ctl_offs = 0x3D4,
		.pwr_sta_offs = 0x16C,
		.pwr_sta2nd_offs = 0x170,
		.sram_pdn_bits = BIT(8),
		.sram_pdn_ack_bits = BIT(12),
		.bp_cfg = {
			BUS_PROT_WR_IGN(SUB_TYPE,
				MT8169_NNA_PROT_NNA0_STEP1,
				MT8169_NNA_PROT_SET,
				MT8169_NNA_PROT_CLR,
				MT8169_NNA_PROT_STA),
			BUS_PROT_UPDATE_INV(INFRA_TYPE,
				MT8169_NNA_WAYEN_NNA0_STEP2,
				MT8169_NNA_WAYEN_SET,
				MT8169_NNA_WAYEN_CLR,
				MT8169_NNA_WAYEN_STA),
			BUS_PROT_WR_IGN(INFRA_TYPE,
				MT8169_NNA_PROT_EXT_NNA0_STEP3,
				MT8169_NNA_PROT_EXT_SET,
				MT8169_NNA_PROT_EXT_CLR,
				MT8169_NNA_PROT_EXT_STA),
		},
		.caps = MTK_SCPD_KEEP_DEFAULT_OFF,
	},
	[MT8169_POWER_DOMAIN_NNA1] = {
		.sta_mask = BIT(28),
		.ctl_offs = 0x3D8,
		.pwr_sta_offs = 0x16C,
		.pwr_sta2nd_offs = 0x170,
		.sram_pdn_bits = BIT(8),
		.sram_pdn_ack_bits = BIT(12),
		.bp_cfg = {
			BUS_PROT_WR_IGN(SUB_TYPE,
				MT8169_NNA_PROT_NNA1_STEP1,
				MT8169_NNA_PROT_SET,
				MT8169_NNA_PROT_CLR,
				MT8169_NNA_PROT_STA),
			BUS_PROT_UPDATE_INV(INFRA_TYPE,
				MT8169_NNA_WAYEN_NNA1_STEP2,
				MT8169_NNA_WAYEN_SET,
				MT8169_NNA_WAYEN_CLR,
				MT8169_NNA_WAYEN_STA),
			BUS_PROT_WR_IGN(INFRA_TYPE,
				MT8169_NNA_PROT_EXT_NNA1_STEP3,
				MT8169_NNA_PROT_EXT_SET,
				MT8169_NNA_PROT_EXT_CLR,
				MT8169_NNA_PROT_EXT_STA),
		},
		.caps = MTK_SCPD_KEEP_DEFAULT_OFF,
	},
	[MT8169_POWER_DOMAIN_NNA2] = {
		.sta_mask = BIT(29),
		.ctl_offs = 0x3DC,
		.pwr_sta_offs = 0x16C,
		.pwr_sta2nd_offs = 0x170,
		.sram_pdn_bits = BIT(8),
		.sram_pdn_ack_bits = BIT(12),
		.bp_cfg = {
			BUS_PROT_WR_IGN(SUB_TYPE,
				MT8169_NNA_PROT_NNA2_STEP1,
				MT8169_NNA_PROT_SET,
				MT8169_NNA_PROT_CLR,
				MT8169_NNA_PROT_STA),
			BUS_PROT_UPDATE_INV(INFRA_TYPE,
				MT8169_NNA_WAYEN_NNA2_STEP2,
				MT8169_NNA_WAYEN_SET,
				MT8169_NNA_WAYEN_CLR,
				MT8169_NNA_WAYEN_STA),
			BUS_PROT_WR_IGN(INFRA_TYPE,
				MT8169_NNA_PROT_EXT_NNA2_STEP3,
				MT8169_NNA_PROT_EXT_SET,
				MT8169_NNA_PROT_EXT_CLR,
				MT8169_NNA_PROT_EXT_STA),
		},
		.caps = MTK_SCPD_KEEP_DEFAULT_OFF,
	},
	[MT8169_POWER_DOMAIN_ADSP_AO] = {
		.sta_mask = BIT(17),
		.ctl_offs = 0x9FC,
		.pwr_sta_offs = 0x16C,
		.pwr_sta2nd_offs = 0x170,
		.caps = MTK_SCPD_KEEP_DEFAULT_OFF,
	},
	[MT8169_POWER_DOMAIN_ADSP_INFRA] = {
		.sta_mask = BIT(10),
		.ctl_offs = 0x9F8,
		.pwr_sta_offs = 0x16C,
		.pwr_sta2nd_offs = 0x170,
		.caps = MTK_SCPD_KEEP_DEFAULT_OFF,
	},
	[MT8169_POWER_DOMAIN_ADSP_TOP] = {
		.sta_mask = BIT(31),
		.ctl_offs = 0x3E4,
		.pwr_sta_offs = 0x16C,
		.pwr_sta2nd_offs = 0x170,
		.sram_pdn_bits = BIT(8),
		.sram_pdn_ack_bits = BIT(12),
		.bp_cfg = {
			BUS_PROT_WR_IGN(INFRA_TYPE,
				MT8169_TOP_AXI_PROT_EN_3_ADSP_TOP_STEP1,
				MT8169_TOP_AXI_PROT_EN_3_SET,
				MT8169_TOP_AXI_PROT_EN_3_CLR,
				MT8169_TOP_AXI_PROT_EN_3_STA),
			BUS_PROT_WR_IGN(INFRA_TYPE,
				MT8169_TOP_AXI_PROT_EN_3_ADSP_TOP_STEP2,
				MT8169_TOP_AXI_PROT_EN_3_SET,
				MT8169_TOP_AXI_PROT_EN_3_CLR,
				MT8169_TOP_AXI_PROT_EN_3_STA),
		},
		.caps = MTK_SCPD_SRAM_ISO | MTK_SCPD_KEEP_DEFAULT_OFF | MTK_SCPD_ACTIVE_WAKEUP,
	},
};

static const struct scpsys_soc_data mt8169_scpsys_data = {
	.domains_data = scpsys_domain_data_mt8169,
	.num_domains = ARRAY_SIZE(scpsys_domain_data_mt8169),
};

#endif /* __SOC_MEDIATEK_MT8169_PM_DOMAINS_H */
